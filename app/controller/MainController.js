/*
 * File: app/controller/MainController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.MainController', {
    extend: 'Ext.app.Controller',

    requires: [
            'Ext.MessageBox'
    ],

    config: {
        refs: {
            peopleList: 'peopleContainer list',
            tabPanel: 'categoriesTabPanel',
            detailsContainer: 'detailsContainer',
            sendSmsButton: 'detailsContainer button[action=sendSms]',
            organizationsList: 'organizationsContainer list',
            othersList: 'othersContainer list',
            backButton: 'mainView toolbar button[action=backButton]',
            facebookShareButton: 'mainView toolbar button[action=facebookShareButton]',
            peopleSearchField: 'searchfield[name=peopleSearchField]',
            organizationsSearchField: 'searchfield[name=organizationsSearchField]',
            othersSearchField: 'searchfield[name=othersSearchField]',
            searchButton:'mainView toolbar button[action=searchButton]',
            searchContainer: {
                autoCreate: true,
                selector: '#searchContainer',
                xtype: 'searchContainer'
            },
            searchButtonInContainer: 'searchContainer button',
            peopleCheckboxInContainer:'searchContainer checkboxfield[name=people]',
            organizationsCheckboxInContainer:'searchContainer checkboxfield[name=organizations]',
            othersCheckboxInContainer:'searchContainer checkboxfield[name=others]'
        },

        control: {
            "peopleList": {
                itemtap: 'onPeopleListItemTap'
            },
            "organizationsList": {
                itemtap: 'onOrganizationsListItemTap'
            },
            "othersList": {
                itemtap: 'onOthersListItemTap'
            },
            "sendSmsButton": {
                tap: 'onSendSmsButtonTap'
            },
            "backButton": {
                tap: 'onBackButtonTap'
            },
            "facebookShareButton": {
                tap: 'onFaceboookShareButtonTap'
            },
            "searchButton":{
                tap:'onSearchButtonTap'
            },
            "tabPanel": {
                activeitemchange: 'onTabPanelActiveItemChange'
            },
            "peopleSearchField": {
                keyup: 'onPeopleSearchKeyUp',
                clearicontap: function(argument) {
                    Ext.getStore('PeopleStore').clearFilter();
                }
            },
            "organizationsSearchField": {
                keyup: 'onOrganizationsSearchKeyUp',
                clearicontap: function(argument) {
                    Ext.getStore('OrganizationsStore').clearFilter();
                }
            },
            "othersSearchField": {
                keyup: 'onOthersSearchKeyUp',
                clearicontap: function(argument) {
                    Ext.getStore('OthersStore').clearFilter();
                }
            },
            "searchButtonInContainer" : {
                tap:'onsearchButtonInContainerTap'
            }
        }
    },

    onPeopleListItemTap: function(thisObj, index, target, record, e, eOpts) {
        console.log("this obj",thisObj,"index",index,"record",record);
        var me = this;
        me.facebookShareLinkProps = this.getFacebookShareLinkProps(record);
        me.getSendSmsButton().set('text', record.get('text'));
        me.navigateToDetails(me.indexes.peopleList, record);
    },

    onOrganizationsListItemTap: function(thisObj, index, target, record, e, eOpts) {
        this.facebookShareLinkProps = this.getFacebookShareLinkProps(record);
        this.getSendSmsButton().set('text', record.get('text'));
        this.navigateToDetails(this.indexes.organizationsList, record);

    },
    onSearchButtonTap : function(button, e, eOpts) {
        console.log("search button clicked");
         var me = this;
        var popup = me.getSearchContainer();
        popup.showBy(button);
    },
    onsearchButtonInContainerTap : function(button, e, eOpts){
        console.log("search is performed");
        var me = this;
        var formValues = me.getSearchContainer().getValues();
        console.log("values: ",formValues);
        var organizations = formValues["organizations"],
            people = formValues["people"],
            others = formValues["others"],
            keyword = formValues["keyword"];

        var typeParams = [];
        if(people!==null)
            typeParams.push(people);
        if(organizations!==null)
            typeParams.push(organizations);
        if(others!==null)
            typeParams.push(others);

        console.log(typeParams);

        var searchStore = Ext.getStore('SearchStore');
        var searchProxy = searchStore.getProxy();
        searchProxy.setExtraParam('type', typeParams.join(',') );
        searchProxy.setExtraParam('term', keyword );
        //searchStore.load();

        searchStore.load(function(records, operation, success) {
            console.log('loaded records',records);
            if(records.length==0){
                searchStore.removeAll();
            }
        });
        var popup = me.getSearchContainer();
        popup.hide();
    },

    onOthersListItemTap: function(thisObj, index, target, record, e, eOpts) {
        this.facebookShareLinkProps = this.getFacebookShareLinkProps(record);
        this.getSendSmsButton().set('text', record.get('text'));
        this.navigateToDetails(this.indexes.othersList, record);
    },

    onSendSmsButtonTap: function(button, e, eOpts) {

        var me = this,
            record = me.activeRecord,
            key = '',
            date = new Date(),
            recordId = record.get('id');



        me.incrementSmsCounter(recordId, new Date(), me.stores[me.comingFrom] || me.stores[me.comingFrom.config.index]);

        window.location = 'sms:' + '17777?body=' + record.get('text');

    },

    onBackButtonTap: function(argument) {
        var me = this;
        me.navigateBack();
    },

    onFaceboookShareButtonTap: function(argument) {
        var sharer = "https://www.facebook.com/sharer.php?";
        window.open(sharer + this.facebookShareLinkProps, '_system');
    },

    onTabPanelActiveItemChange: function(thisObj, value, oldValue, eOpts) {
        this.comingFrom = oldValue;
        document.oldValue = oldValue;
    },

    onPeopleSearchKeyUp: function(thisObj, e, eOpts) {
        this.filterStore(Ext.getStore('PeopleStore'), thisObj.getValue());
    },

    onOrganizationsSearchKeyUp: function(thisObj, e, eOpts) {
        this.filterStore(Ext.getStore('OrganizationsStore'), thisObj.getValue());
    },

    onOthersSearchKeyUp: function(thisObj, e, eOpts) {
        this.filterStore(Ext.getStore('OthersStore'), thisObj.getValue());
    },


    launch: function() {

        var me = this;
        me.getApplication().on('backButtonTap', function() {
            me.navigateBack();
        });

        me.indexes = {
            homeList:0,
            peopleList: 1,
            organizationsList: 2,
            othersList: 3,
            details: 4,
            history: 5

        };

        me.stores = [
            Ext.getStore('PeopleStore'),
            Ext.getStore('OrganizationsStore'),
            Ext.getStore('OthersStore'),
        ];
        me.counterStore = Ext.getStore('SmsCountStore');
        me.counterStore.load();
        me.initializeStores();

        me.getDetailsContainer().element.on({
            swipe: function(e) {
                if (e.direction == 'right') {
                    me.navigateBack();
                }
            }
        });

        var searchStore = Ext.getStore('SearchStore');
        var searchProxy = searchStore.getProxy();
        searchProxy.setExtraParam('type', '0' );
        searchProxy.setExtraParam('term', 'Дария' );
        searchStore.load();
    },

    incrementSmsCounter: function(recordId, date, store) {
        var me = this,
            model,
            visual;

        visual = store.findRecord('id', recordId);
        visual.set('badge', visual.get('badge') + 1);


        me.counterStore.load();
        model = me.counterStore.queryBy(function(record, index) {
            return record.get('for') == recordId && record.get('key') == date.toLocaleDateString();
        }).getAt(0);
        if (model) {
            model.set('count', model.get('count') + 1);
        } else {
            var model = new MyApp.model.SmsCountModel();
            model.set('key', date.toLocaleDateString());
            model.set('for', recordId);
            model.set('count', 1);
            me.counterStore.add(model);
        }
        me.counterStore.sync();

    },

    initializeStores: function() {
        var me = this,
            badge;

        Ext.each(me.stores, function(store) {
            // for every store on load do :
            store.on('load', function(st, records) {
                //determine the badge for the record
                Ext.each(records, function(rec) {

                    badge = 0;
                    Ext.each(me.counterStore.getData().all, function(model, index) {
                        if (model.get('for') == rec.get('id')) {
                            badge += model.get('count');
                        }
                    });
                    //set badge
                    rec.set('badge', badge);

                })
            })
            store.load();
        });
    },

    navigateBack: function() {
        var me = this,
            activeItem = me.getTabPanel().getActiveItem();

        if (activeItem.config.root) {
            //exit
            navigator.app.exitApp();
        } else {
            me.getTabPanel().setActiveItem(me.comingFrom);
        }
    },

    navigateToDetails: function(comingFrom, record) {
        var me = this,
            tabPanel = this.getTabPanel();

            console.log("tabPanel",tabPanel);

        // refresh details with the selected record
        me.refreshDetailsContainer(record);
        me.getDetailsContainer().getScrollable().getScroller().scrollToTop();

        // save the last location for later return with swipe
        me.comingFrom = comingFrom;

        console.log(me.indexes.details);
        // navigate to the details view
        tabPanel.setActiveItem(me.indexes.details);

        // cache the selected record
        me.activeRecord = record;
    },
    navigateToSearch:function(){

    },
    refreshDetailsContainer: function(record) {
        var me = this
        me
            .getDetailsContainer()
            .setHtml(me.getDetailsContainer().template.apply(record.getData()));
    },

    getFacebookShareLinkProps: function(record) {
        // var props =
        //     '&p[url]=' + encodeURIComponent(record.get('campaignUrl')) +
        //     '&p[summary]=' + encodeURIComponent(record.get('description')) +
        //     '&p[title]=' + encodeURIComponent(record.get('title')) +
        //     '&p[images][0]=' + encodeURIComponent(record.get('bigImageUrl'));
        // return props;
        return "u=dmsbg.com"
    },

    filterStore: function(store, value) {
        console.log('message');
        store.clearFilter();
        var regex = new RegExp(value, 'i');
        store.filterBy(function(rec) {
            return regex.test(rec.get('text'));
        });
    }

});